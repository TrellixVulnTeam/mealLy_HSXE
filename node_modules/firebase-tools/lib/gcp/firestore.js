"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteDocuments = exports.deleteDocument = exports.listCollectionIds = void 0;
const api = require("../api");
const _API_ROOT = "/v1beta1/";
function listCollectionIds(project) {
    const url = _API_ROOT + "projects/" + project + "/databases/(default)/documents:listCollectionIds";
    return api
        .request("POST", url, {
        auth: true,
        origin: api.firestoreOriginOrEmulator,
        data: {
            pageSize: 2147483647,
        },
    })
        .then((res) => {
        return res.body.collectionIds || [];
    });
}
exports.listCollectionIds = listCollectionIds;
async function deleteDocument(doc) {
    return api.request("DELETE", _API_ROOT + doc.name, {
        auth: true,
        origin: api.firestoreOriginOrEmulator,
    });
}
exports.deleteDocument = deleteDocument;
async function deleteDocuments(project, docs) {
    const url = _API_ROOT + "projects/" + project + "/databases/(default)/documents:commit";
    const writes = docs.map((doc) => {
        return { delete: doc.name };
    });
    const body = { writes };
    try {
        const res = await api.request("POST", url, {
            auth: true,
            data: body,
            origin: api.firestoreOriginOrEmulator,
        });
        return res.body.writeResults.length;
    }
    catch (err) {
        if (err.status === 400 &&
            err.message.indexOf("Transaction too big") !== -1 &&
            docs.length > 2) {
            const a = await deleteDocuments(project, docs.slice(0, docs.length / 2));
            const b = await deleteDocuments(project, docs.slice(docs.length / 2));
            return a + b;
        }
        throw err;
    }
}
exports.deleteDocuments = deleteDocuments;
